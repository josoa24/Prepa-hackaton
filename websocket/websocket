#!/usr/bin/php
<?php

require __DIR__ . '/../vendor/autoload.php';
define('FCPATH', __DIR__ . DIRECTORY_SEPARATOR);
if (getcwd() . DIRECTORY_SEPARATOR !== FCPATH)
  chdir(FCPATH);
require FCPATH . '../app/Config/Paths.php';
$paths = new Config\Paths();
require $paths->systemDirectory . '/Boot.php';

use Ratchet\MessageComponentInterface;
use Ratchet\ConnectionInterface;

class ChatServer implements MessageComponentInterface
{
  protected $clients;
  protected $mapped_chat_ids;
  protected $db;

  public function __construct()
  {
    $this->clients = [];
    $this->mapped_chat_ids = [];
    $this->db = new PDO('mysql:host=localhost;dbname=hackaton_icollab', 'razherana', '');
  }

  public function onOpen(ConnectionInterface $conn)
  {
    $this->clients[$conn->resourceId] = $conn;
  }

  public function onMessage(ConnectionInterface $from, $msg)
  {
    $data = json_decode($msg, true);
    $data['group_id'] = $data['group_id'] ?? [];

    if (isset($data['type']) && $data['type'] == 'connect') {
      $this->mapped_chat_ids[$data['group_id']][$data['id']] = $from->resourceId;

      echo "Chat id : {$data['id']} + {$data['group_id']} connected with resourceId {$from->resourceId}\n";
      return;
    }

    $user_id = $data['id'];
    $group_id = $data['group_id'];
    $message = $data['message'];
    $reply_id = $data['reply_id'] ?? null;

    $this->db->prepare('INSERT INTO Message (group_id, user_id, content, timestamp, reply_to) VALUES (?, ?, ?, ?, ?)')->execute([
      $group_id,
      $user_id,
      $message,
      date('Y-m-d H:i:s'),
      $reply_id
    ]);

    $message_id = $this->db->lastInsertId();

    foreach ($this->mapped_chat_ids[$group_id] as $userId => $resourceId)
      if ($userId != $user_id) {
        $this->clients[$resourceId]->send(json_encode([
          'type' => 'message_receive',
          'id' => $user_id,
          'group_id' => $group_id,
          'message_id' => $message_id,
          'message' => $message,
          'timestamp' => date('Y-m-d H:i:s'),
          'reply_id' => $reply_id
        ]));
      }
  }

  public function onClose(ConnectionInterface $conn)
  {
    $this->clients[$conn->resourceId] = null;
    unset($this->clients[$conn->resourceId]);
    foreach ($this->mapped_chat_ids as $group) {
      foreach ($group as $userId => $resourceId) {
        if ($resourceId == $conn->resourceId) {
          unset($this->mapped_chat_ids[$group][$userId]);
          echo "Chat id : {$userId} + {$group} disconnected from resourceId {$conn->resourceId}\n";
          return;
        }
      }
    }
  }

  public function onError(ConnectionInterface $conn, \Exception $e)
  {
    echo "Error: {$e->getMessage()}\n";

    $this->onClose($conn);
    $conn->close();
  }
}

$server = Ratchet\Server\IoServer::factory(
  new Ratchet\Http\HttpServer(new Ratchet\WebSocket\WsServer(new ChatServer())),
  8081
);
$server->run();
